// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.3.1
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be\be_codegen.cpp:376


#include "IBasicEventCorbaC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "IBasicEventCorbaC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be\be_visitor_union\union_cs.cpp:79

IBASICEVENTCORBA_module::Arg::Arg (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (IBASICEVENTCORBA_module::VariantTypes) -1;
}

IBASICEVENTCORBA_module::Arg::Arg (const ::IBASICEVENTCORBA_module::Arg &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case IBASICEVENTCORBA_module::VT_LONG:
    {
      this->u_.lValue_ = u.u_.lValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_ULONG:
    {
      this->u_.ulValue_ = u.u_.ulValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_DOUBLE:
    {
      this->u_.dValue_ = u.u_.dValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_LONGLONG:
    {
      this->u_.llValue_ = u.u_.llValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_ULONGLONG:
    {
      this->u_.ullValue_ = u.u_.ullValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_STRING:
    {
      this->u_.strValue_ = ::CORBA::string_dup (u.u_.strValue_);
    }
    break;
    default:
    break;
  }
}

IBASICEVENTCORBA_module::Arg::~Arg (void)
{
  // Finalize.
  this->_reset ();
}

IBASICEVENTCORBA_module::Arg &
IBASICEVENTCORBA_module::Arg::operator= (const ::IBASICEVENTCORBA_module::Arg &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case IBASICEVENTCORBA_module::VT_LONG:
    {
      this->u_.lValue_ = u.u_.lValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_ULONG:
    {
      this->u_.ulValue_ = u.u_.ulValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_DOUBLE:
    {
      this->u_.dValue_ = u.u_.dValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_LONGLONG:
    {
      this->u_.llValue_ = u.u_.llValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_ULONGLONG:
    {
      this->u_.ullValue_ = u.u_.ullValue_;
    }
    break;
    case IBASICEVENTCORBA_module::VT_STRING:
    {
      this->u_.strValue_ = ::CORBA::string_dup (u.u_.strValue_);
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void IBASICEVENTCORBA_module::Arg::_reset (void)
{
  switch (this->disc_)
  {
    
    case IBASICEVENTCORBA_module::VT_LONG:
      break;
    case IBASICEVENTCORBA_module::VT_ULONG:
      break;
    case IBASICEVENTCORBA_module::VT_DOUBLE:
      break;
    case IBASICEVENTCORBA_module::VT_LONGLONG:
      break;
    case IBASICEVENTCORBA_module::VT_ULONGLONG:
      break;
    case IBASICEVENTCORBA_module::VT_STRING:
      ::CORBA::string_free (this->u_.strValue_);
      this->u_.strValue_ = 0;
      break;
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_IBASICEVENTCORBA_MODULE_EVENTARGSEQ_CS_)
#define _IBASICEVENTCORBA_MODULE_EVENTARGSEQ_CS_

IBASICEVENTCORBA_module::EventArgSeq::EventArgSeq (void)
{}

IBASICEVENTCORBA_module::EventArgSeq::EventArgSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        EventArg
      > (max)
{}

IBASICEVENTCORBA_module::EventArgSeq::EventArgSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    IBASICEVENTCORBA_module::EventArg * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        EventArg
      >
    (max, length, buffer, release)
{}

IBASICEVENTCORBA_module::EventArgSeq::EventArgSeq (
    const EventArgSeq &seq)
  : ::TAO::unbounded_value_sequence<
        EventArg
      > (seq)
{}

IBASICEVENTCORBA_module::EventArgSeq::~EventArgSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_IBASICEVENTCORBA_MODULE_EVENTSPECSEQ_CS_)
#define _IBASICEVENTCORBA_MODULE_EVENTSPECSEQ_CS_

IBASICEVENTCORBA_module::EventSpecSeq::EventSpecSeq (void)
{}

IBASICEVENTCORBA_module::EventSpecSeq::EventSpecSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        EventSpec
      > (max)
{}

IBASICEVENTCORBA_module::EventSpecSeq::EventSpecSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    IBASICEVENTCORBA_module::EventSpec * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        EventSpec
      >
    (max, length, buffer, release)
{}

IBASICEVENTCORBA_module::EventSpecSeq::EventSpecSeq (
    const EventSpecSeq &seq)
  : ::TAO::unbounded_value_sequence<
        EventSpec
      > (seq)
{}

IBASICEVENTCORBA_module::EventSpecSeq::~EventSpecSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be\be_visitor_enum\cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, IBASICEVENTCORBA_module::VariantTypes _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, IBASICEVENTCORBA_module::VariantTypes & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<IBASICEVENTCORBA_module::VariantTypes> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_union\cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IBASICEVENTCORBA_module::Arg &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case IBASICEVENTCORBA_module::VT_LONG:
      {
        result = strm << _tao_union.lValue ();
      }
      break;
    case IBASICEVENTCORBA_module::VT_ULONG:
      {
        result = strm << _tao_union.ulValue ();
      }
      break;
    case IBASICEVENTCORBA_module::VT_DOUBLE:
      {
        result = strm << _tao_union.dValue ();
      }
      break;
    case IBASICEVENTCORBA_module::VT_LONGLONG:
      {
        result = strm << _tao_union.llValue ();
      }
      break;
    case IBASICEVENTCORBA_module::VT_ULONGLONG:
      {
        result = strm << _tao_union.ullValue ();
      }
      break;
    case IBASICEVENTCORBA_module::VT_STRING:
      {
        result = strm << _tao_union.strValue ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IBASICEVENTCORBA_module::Arg &_tao_union
  )
{
  IBASICEVENTCORBA_module::VariantTypes _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case IBASICEVENTCORBA_module::VT_LONG:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.lValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case IBASICEVENTCORBA_module::VT_ULONG:
      {
        CORBA::ULong _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.ulValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case IBASICEVENTCORBA_module::VT_DOUBLE:
      {
        CORBA::Double _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.dValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case IBASICEVENTCORBA_module::VT_LONGLONG:
      {
        CORBA::ULongLong _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.llValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case IBASICEVENTCORBA_module::VT_ULONGLONG:
      {
        CORBA::ULongLong _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.ullValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case IBASICEVENTCORBA_module::VT_STRING:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.strValue (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatibility, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IBASICEVENTCORBA_module::EventArg &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.id_.in ()) &&
    (strm << _tao_aggregate.arg_);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IBASICEVENTCORBA_module::EventArg &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.id_.out ()) &&
    (strm >> _tao_aggregate.arg_);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_IBASICEVENTCORBA_module_EventArgSeq_CPP_
#define _TAO_CDR_OP_IBASICEVENTCORBA_module_EventArgSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IBASICEVENTCORBA_module::EventArgSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IBASICEVENTCORBA_module::EventArgSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_IBASICEVENTCORBA_module_EventArgSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IBASICEVENTCORBA_module::EventSpec &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.param_number) &&
    (strm << _tao_aggregate.spec_string.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IBASICEVENTCORBA_module::EventSpec &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.param_number) &&
    (strm >> _tao_aggregate.spec_string.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_IBASICEVENTCORBA_module_EventSpecSeq_CPP_
#define _TAO_CDR_OP_IBASICEVENTCORBA_module_EventSpecSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IBASICEVENTCORBA_module::EventSpecSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IBASICEVENTCORBA_module::EventSpecSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_IBASICEVENTCORBA_module_EventSpecSeq_CPP_ */

// TAO_IDL - Generated from
// be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const IBASICEVENTCORBA_module::BasicEventCorba &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.namespace_.in ()) &&
    (strm << _tao_aggregate.event_id_) &&
    (strm << _tao_aggregate.format_.in ()) &&
    (strm << _tao_aggregate.map_spec_) &&
    (strm << _tao_aggregate.args_) &&
    (strm << _tao_aggregate.node_id_.in ()) &&
    (strm << _tao_aggregate.source_id_.in ()) &&
    (strm << _tao_aggregate.severity_);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    IBASICEVENTCORBA_module::BasicEventCorba &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.namespace_.out ()) &&
    (strm >> _tao_aggregate.event_id_) &&
    (strm >> _tao_aggregate.format_.out ()) &&
    (strm >> _tao_aggregate.map_spec_) &&
    (strm >> _tao_aggregate.args_) &&
    (strm >> _tao_aggregate.node_id_.out ()) &&
    (strm >> _tao_aggregate.source_id_.out ()) &&
    (strm >> _tao_aggregate.severity_);
}

TAO_END_VERSIONED_NAMESPACE_DECL



